1.仓库操作
git remote -v -------------------------------------------------------------------------------- 查看远程仓库
git init ------------------------------------------------------------------------------------- 创建本地仓库
git clone <remoteUrl> ------------------------------------------------------------------------ 克隆远程仓库
git clone <remoteUrl> <alias> ---------------------------------------------------------------- 克隆远程仓库并指定本地文件夹名称

2.查看分支操作
git branch -a -------------------------------------------------------------------------------- 查看远程分支
git branch ----------------------------------------------------------------------------------- 查看本地分支

3.重命名分支
git branch -m devel develop ------------------------------------------------------------------ 重新命名分支

3.切换分支
git checkout <localBranch> ------------------------------------------------------------------- 切换本地分支 


4.创建分支
git branch <localBranch> --------------------------------------------------------------------- 创建本地分支
git checkout -b <localBranch> ---------------------------------------------------------------- 创建并切换到新的分支

5.远程分支提交操作
git push origin <remoteBranch> --------------------------------------------------------------- 本地指定仓库分支名提交(也可推送本地分支默认同名)
git push origin <localBranch>:<remoteBranch> ------------------------------------------------- 本地分支推送到远程库


6.track远程分支
git push --set-upstream origin <remoteBranch> ------------------------------------------------ 本地分支关联远程分支
git branch --set-upstream-to=origin/<remoteBranch> <localBranch> ----------------------------- 本地分支关联远程分支
git branch --unset-upstream ------------------------------------------------------------------ 本地分支取消关联

7.分支删除操作
git branch -d <branchName> ------------------------------------------------------------------- 简单删除本地分支
git branch -D <branchName> ------------------------------------------------------------------- 强制删除本地分支
git push origin --delete <remoteBranch> ------------------------------------------------------ 删除远程分支(直接删除)
git push origin :<remoteBranch> -------------------------------------------------------------- 删除远程分支(空分支替换)

8.标签操作
git tag <tagName> ---------------------------------------------------------------------------- 创建轻量标签
git tag -d <tagName> ------------------------------------------------------------------------- 删除本地标签
git checkout <tagName> ----------------------------------------------------------------------- 切换到标签状态
                                                                                               (HEAD处于分离头指针状态，即HEAD指向一个具体的commit不是某个分支的引用)
git checkout -b branchName tagName ----------------------------------------------------------- 从tag处checkout 一个新分支
git push origin --delete tag <tagName> ------------------------------------------------------- 删除远程标签(直接删除)


8.缓存操作
git stash ------------------------------------------------------------------------------------ 缓存当前内容
git stash pop -------------------------------------------------------------------------------- 提取缓存栈顶内容
git stash list ------------------------------------------------------------------------------- 列出缓存栈列表
git stash pop stash@{n} ---------------------------------------------------------------------- 提取指定缓存内容
git stash drop stash@{n} --------------------------------------------------------------------- 删除指定缓存栈内容

9.远程代码拉取操作
git pull ------------------------------------------------------------------------------------- 直接拉取并merge远程代码
git pull --rebase ---------------------------------------------------------------------------- rebase以rebase方式拉远程代码
git fetch ------------------------------------------------------------------------------------ 只拉取远程代码


10.本地分支合并


11.撤销本地操作
git revert <SHA> ----------------------------------------------------------------------------- 撤销某个commit的修改(不影响其它commit修改,与后续commit的有冲突需解决冲突)

git revert HEAD  ----------------------------------------------------------------------------- 撤销上一个commit的修改(不影响其它commit,revert操作会增加一个新的commit)

git revert HEAD^ ----------------------------------------------------------------------------- 撤销上上个commit的修改(不影响其它commit,revert操作会增加一个新的commit)

git commit --amend --------------------------------------------------------------------------- 如果上一个commit后内容无修改则只修改commit消息,如果上一个commit后内容有修改则新修改加入到上一个commit中

git reset <SHA> ------------------------------------------------------------------------------ 重置某个commit后的所有commit保留修改内容

git reset --hard <SHA> ----------------------------------------------------------------------- 重置某个commit后的所有commit不保留内容(丢失所有的修改)

git reflog
git reset --hard <HEAD_SHA> ------------------------------------------------------------------ 重置HEAD到某个HEAD节点

git reflog
git checkout <HEAD_SHA> -- <fileName> -------------------------------------------------------- 将某个文件或多个文件恢复到某个HEAD节点

git reflog
git cherry-pick <HEAD_SHA> ------------------------------------------------------------------- 将某个commit重新提交到代码库


12.撤销远程操作
git revert <SHA> 
git push ------------------------------------------------------------------------------------- 撤销远程操作

13.将文件移除版本控制
git rm -r --cache fileName


14.rebase 操作
git merge-base my-branch base-branch --------------------------------------------------------- 查看自己的分支与base分支的公共节点(返回公共节点的HASH值)


15.强制更新
git push origin +<branchName> ---------------------------------------------------------------- 强制更新远程分支



/***********查看两个分支的共同节点***********/
git merge-base <oneBranchName> <anotherBranchName>

/**********创建本地库push到远程库***********/
1.远程库创建git项目
2.git init
3.touch README
4.git add .
5.git commit -m "init commit"
6.git remote add origin remote-repository-url
7.git remote -v
8.git push origin master

/******根据远程分支创建本地分支并track******/
1.git checkout -b localBranch origin/remoteBranch


/**************合并远程commit***************/
1.git rebase -i origin/master~4 master
2.git push origin +master

/**************文章*************************/
https://github.com/edx/edx-platform/wiki/How-to-Rebase-a-Pull-Request













